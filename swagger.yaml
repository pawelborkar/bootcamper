openapi: 3.0.0
info:
  title: Bootcamper
  description: Bootcamper API for searching bootcamps.
  version: 1.0.0
servers:
  - url: 'https://api.bootcamper.pawel.in'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []
tags:
  - name: Auth
    description: >-
      Routes for user authentication including signup, signin, forgot password,
      etc
  - name: Bootcamps
    description: 'Bootcamps Create, Read, Update, Delete, Filter and Sort functionalities.'
  - name: Courses
    description: All APIs related to courses.
  - name: Reviews
    description: User reviews for bootcamps and courses.
  - name: Admin
    description: CRUD functionalities for users only available to admins
paths:
  /api/v1/auth/signup:
    post:
      tags:
        - Auth
      summary: SignUp
      description: Registers a new user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Pawel Borkar
                username: pawel
                email: hi@pawel.in
                password: Pawel@123!
                role: publisher
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/auth/signin:
    post:
      tags:
        - Auth
      summary: SignIn
      description: Login User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                usernameOrEmail: hi@pawel.in
                password: Pawel@1234
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/auth/logout:
    get:
      tags:
        - Auth
      summary: Logout
      description: Logout User
      responses:
        '200':
          description: Successful response
  /api/v1/auth/me:
    post:
      tags:
        - Auth
      summary: Get Logged in User
      description: Get the current logged in user by sending token
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Forgot Password
      description: >-
        Generates reset token and sends an email to the user in order to reset
        the password with an expiration time of 10 mins.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                usernameOrEmail: user
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/auth/reset-password/{resetToken}:
    put:
      tags:
        - Auth
      summary: Reset Password
      description: Reset user password using token.
      parameters: 
        - name: resetToken
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: reset token received via email
          example: '31cab4ef9ca4fe05aa800eaf334e9a9402ee06ce' # Example bootcamp ID 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                password: Seneca@1234
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/auth/update-details:
    put:
      tags:
        - Auth
      summary: Update User Details
      description: Update the details of the logged in user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: User
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/auth/update-password:
    put:
      tags:
        - Auth
      summary: Update User Password
      description: Update the password of the current logged in user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                currentPassword: User@1234
                newPassword: Abc@1234
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/bootcamps:
    get:
      tags:
        - Bootcamps
      summary: Get All Bootcamps
      description: |-
        - Fetch all bootcamps information from database.
        - Includes pagination, filtering, etc.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Bootcamps
      summary: Create New Bootcamp
      description: |-
        - **Create New Bootcamp**
            

        | **Access** |  |  |
        | --- | --- | --- |
        | Roles | Admin  <br> | User |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: ModernTech Bootcamp
                description: >-
                  ModernTech has one goal, and that is to make you a rockstar
                  developer and/or designer with a six figure salary. We teach
                  both development and UI/UX
                website: 'https://moderntech.com'
                phone: (222) 222-2222
                email: enroll@moderntech.com
                address: '220 Pawtucket St, Lowell, MA 01854'
                careers:
                  - Web Development
                  - UI/UX
                  - Mobile Development
                housing: false
                jobAssistance: true
                jobGuarantee: false
                acceptGi: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/bootcamps/{bootcampId}:
    get:
      tags:
        - Bootcamps
      summary: Get Single Bootcamp
      description: '- Get single bootcamp by ID.'
      operationId: getSingleBootcamp
      parameters:
        - name: bootcampId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the bootcamp
          example: '5d725a1b7b292f5f8ceff788' # Example bootcamp ID 
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Bootcamps
      summary: Update Single Bootcamp
      description: '- Update Single Bootcamp in Database.'
      operationId: updateBootcamp
      parameters:
        - name: bootcampId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the bootcamp
          example: '5d725a1b7b292f5f8ceff788'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: enroll@newera.com
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Bootcamps
      summary: Delete Single Bootcamp
      description: '- Delete Single Bootcamp in Database.'
      operationId: deleteBootcamp
      parameters:
        - name: bootcampId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the bootcamp
          example: '5d725a1b7b292f5f8ceff788'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/bootcamps/radius/:
    get:
      tags:
        - Bootcamps
      summary: 'Get Bootcamps by Radius '
      description: Get all bootcamps within a specific radius
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/bootcamps/:
    get:
      tags:
        - Bootcamps
      summary: Filter & Sort bootcamps
      description: Filter out the bootcamps from the database.
      parameters:
        - name: select
          in: query
          schema:
            type: string
          example: name
        - name: sort
          in: query
          schema:
            type: string
          example: '-name'
        - name: page
          in: query
          schema:
            type: integer
          example: '1'
        - name: limit
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/bootcamps/{bootcampId}/photo:
  put:
    tags:
      - Courses
    summary: Upload Image
    description: Upload image for the bootcamp
    operationId: bootcampUploadPhoto
    parameters:
      - name: courseId
        in: path # Specify "path" as the location
        required: true # Mark it as required
        schema:
          type: string
        description: The ID of the course
        example: '5d725cfec4ded7bcb480eaa5'
    requestBody:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary
    responses:
      '200':
        description: Successful response
        content:
          application/json: {}
  /api/v1/courses:
    get:
      tags:
        - Courses
      summary: Get All Courses
      description: Get all the courses available at the platform
      parameters:
        - name: select
          in: query
          schema:
            type: string
          example: title
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/bootcamps/{bootcampId}/courses:
    get:
      tags:
        - Courses
      summary: Get Courses for a Bootcamp
      description: Get all the courses for a specific bootcamp
      operationId: getCourses
      parameters:
        - name: bootcampId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the bootcamp
          example: '5d725a1b7b292f5f8ceff788'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Courses
      summary: Create New Course
      description: Add a new course into the bootcamp
      operationId: createCourse
      parameters:
        - name: bootcampId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the bootcamp
          example: '5d725a1b7b292f5f8ceff788'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Web Design & Development
                description: >-
                  Get started building websites and web apps with
                  HTML/CSS/JavaScript/PHP. We teach you
                weeks: 10
                tuition: 12000
                level: beginner
                scholarshipsAvailable: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}        
  /api/v1/courses/{courseId}:
    get:
      tags:
        - Courses
      summary: Get  Single Course By Id
      description: Get a single course from the database by sending it's id in the params.
      operationId: getCourse
      parameters:
        - name: courseId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the course
          example: '5d725cfec4ded7bcb480eaa5'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Courses
      summary: Update Single Course
      description: Update a course with an id
      operationId: updateCourse
      parameters:
        - name: courseId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the course
          example: '5d725cfec4ded7bcb480eaa5'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                tuition: 11100
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/bootcamps/{bootcampId}/courses/{courseId}:
    delete:
      tags:
        - Courses
      summary: Delete Single Course
      description: Delete a course from the bootcamp.
      operationId: deleteCourse
      parameters:
        - name: bootcampId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the bootcamp
          example: '5d725a1b7b292f5f8ceff788'

        - name: courseId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the course
          example: '5d725cfec4ded7bcb480eaa5'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/reviews:
    get:
      tags:
        - Reviews
      summary: Get All Reviews
      description: >-
        Get all reviews from database and populate with bootcamp name and
        description.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/bootcamps/{bootcampId}/reviews:
    get:
      tags:
        - Reviews
      summary: Get Reviews For Bootcamp
      description: Fetch the reviews for a specific bootcamp.
      operationId: getAllReviews
      parameters:
        - name: bootcampId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the bootcamp
          example: '5d725a1b7b292f5f8ceff788'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Reviews
      summary: Add Review
      description: Add a review to the bootcamp.
      operationId: addReview
      parameters:
        - name: bootcampId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the bootcamp
          example: '5d725a1b7b292f5f8ceff788'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Superb Job!
                description: Got a very high paying job because of this.
                rating: '10'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/reviews/{reviewId}:
    get:
      tags:
        - Reviews
      summary: Get Single Review
      description: >-
        Fetch a review from database with an id and populate bootcamp with name
        and description.
        operationId: getAllReviews
      parameters:
        - name: reviewId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the review
          example: '5d725a1b7b292f5f8ceff788'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {} 
    put:
      tags:
        - Reviews
      summary: Update  Review For A Bootcamp
      description: Update a review for a bootcamp.
      operationId: updateReview
      parameters:
        - name: reviewId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the review
          example: '5d7a514b5d2c12c7449be020'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Nice Experience!
                description: Experienced faculty and super smart peers.
                rating: 8
      responses:
        '200':
          description: Successful response
          content:
            application/json: {} 
  /api/v1/bootcamps/{bootcampId}/reviews/{reviewId}:
    delete:
      tags:
        - Reviews
      summary: Delete A Review
      description: Deletes a review from the bootcamp.
      operationId: deleteReview
      parameters:
        - name: bootcampId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the bootcamp
          example: '5d725a1b7b292f5f8ceff788'
        - name: reviewId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the review
          example: '5d7a514b5d2c12c7449be020'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {} 
  /api/v1/users:
    get:
      tags:
        - Admin
      summary: Get All Users
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Admin
      summary: Create New User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Admin
                username: admins
                email: admin@oss.org
                password: pawel123!
                role: publisher
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/users/{userId}:
    get:
      tags:
        - Admin
      summary: Get Single User
      description: Get single user details from database by sending id in the params
      operationId: getUser
      parameters:
        - name: userId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the review
          example: '5d7a514b5d2c12c7449be020'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Admin
      summary: Update User
      description: Updates the user details and role
      operationId: updateUser
      parameters:
        - name: userId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the review
          example: '5d7a514b5d2c12c7449be020'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                role: publisher
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Admin
      summary: Delete User
      description: Deletes a user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path # Specify "path" as the location
          required: true # Mark it as required
          schema:
            type: string
          description: The ID of the review
          example: '5d7a514b5d2c12c7449be020'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
